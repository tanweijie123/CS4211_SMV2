MODULE main
VAR
	busy : array 0..1 of boolean;
	up : array 0..1 of { none, start, stop, data, ack };
	down : array 0..1 of { none, start, stop, data, ack }; 
	
	operator1A:	process operator(0, busy, up[1], down[1]);
	operator1B: process operator(1, busy, up[0], down[0]); 
	operator2A:	process operator(0, busy, down[0], up[0]); 
	operator2B: process operator(1, busy, down[1], up[1]); 
	
ASSIGN
	-- Assumes all starts will negative state
	
	init(busy[0]) := FALSE; 
	init(busy[1]) := FALSE; 
	init(up[0]) := none;
	init(up[1]) := none; 
	init(down[0]) := none;
	init(down[1]) := none; 

MODULE operator(id, busy, input, out)
VAR
	thisInitiated : boolean;
	thisListening : boolean; 
	counter : 0..3; -- count the sending of stop if any ( at 4th ) 
DEFINE
	limit := 3; 
	
ASSIGN
	init(thisInitiated) := FALSE; 
	init(thisListening) := FALSE; 
	init(counter) := 0; 

	next(input) :=
		case
			(thisInitiated=TRUE & counter=0 & input=ack)						: none; -- consume the input?ack							
			(thisInitiated=TRUE & counter > 0 & counter <= limit & input=data)	: none; -- consume the input?data 
			(thisInitiated=TRUE & input=stop)									: none; -- consume the input?stop 
		
			(input=start)														: none; -- consume the input?start
			(thisListening=TRUE & input=data)									: none; -- consume the input?data
			(thisListening=TRUE & input=stop)									: none; -- consume the input?stop; 
			
			TRUE																: input; 
		esac;
		
	
	next(out) :=
		case
			(busy[id]=FALSE & busy[1-id]=FALSE)									: start; 
			(thisInitiated=TRUE & counter=0 & input=ack)						: data; -- start sending data after ack 
			(thisInitiated=TRUE & counter > 0 & counter < limit & input=data)	: data; -- sending data 1 - 3
			(thisInitiated=TRUE & counter > 0 & counter <= limit & input=data) 	: stop; -- sending the stop signal
			(thisInitiated=TRUE & counter > 0 & counter = limit & input=data)	: stop; -- sent max limit. sending stop;
		
			(input=start)														: ack; -- reply ack for input?start
			(thisListening=TRUE & input=data)									: data; -- reply data; 
			(thisListening=TRUE & input=stop)									: stop; -- reply stop for input?stop
			
			
			TRUE																: out;
		esac;
		
	
	next(busy[id]) :=
		case
			(busy[id]=FALSE & busy[1-id]=FALSE)					: TRUE; --initiate a chat
			(thisInitiated=TRUE & input=stop)					: FALSE; -- stopped sending
		
			(input=start)										: TRUE; -- other operator started chat
			(thisListening=TRUE & input=stop)					: FALSE; -- other operator ended chat 
			
			TRUE												: busy[id];
		esac; 

	next(thisInitiated) :=
		case
			(busy[id]=FALSE & busy[1-id]=FALSE)					: TRUE; 
			(thisInitiated=TRUE & input=stop)					: FALSE; -- stopped sending.
		
			-- no state change for receiving
		
			TRUE												: thisInitiated;
		esac;
	
	next(thisListening) :=
		case
			-- no state change for sending
			
			(input=start)										: TRUE; 
			(thisListening=TRUE & input=stop)					: FALSE; 
			
			TRUE												: thisListening;
		esac; 

	next(counter) :=
		case
			(thisInitiated=TRUE & counter=0 & input=ack)						: 1; -- send the first data. 
			(thisInitiated=TRUE & counter > 0 & counter < limit & input=data)	: counter + 1;
			(thisInitiated=TRUE & counter > 0 & counter <= limit & input=data)	: 0; -- must send stop; 
			(thisInitiated=TRUE & input=stop)									: 0; -- stopped sending and reset counter
		
			-- no state change for receiving
		
			TRUE																: counter; 
		esac;
		
FAIRNESS
	running
